<launch>
  <arg name="mav_name" default="pelican"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
    <!-- This version uses the openai_ros environments -->
    <rosparam command="load" file="$(find rotors_openai_ros_example)/config/pelican_attitude_controller_params.yaml" />
    <!-- Launch the training system -->
    <include file="$(find rotors_gazebo)/launch/willow_garage_openai_ros.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="world_name" value="$(arg world_name)" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)" />
    </include>

    <node name="mav_nonlinear_mpc_service" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_service_node" ns="$(arg mav_name)" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="true" />
      <param name="reference_frame" value="world"/>
    </node>

    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" ns="$(arg mav_name)" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>

    <!-- launch training script -->
    <!-- <node pkg="rotors_openai_ros_example" name="pelican_test_policy" type="pelican_test_policy.py" output="screen"/> -->
</launch>