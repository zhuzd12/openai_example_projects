<launch>
  <arg name="mav_name" default="pelican"/>
  <arg name="world_name" default="basic"/>
  <arg name="friendly_mav" default="firefly"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <!-- This version uses the openai_ros environments -->
  <rosparam command="load" file="$(find rotors_openai_ros_example)/config/multi_mav_collision_avoidance.yaml" />
  <!-- Launch the training system -->

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="true"/>
    <!-- <arg name="gui" value="false"/> -->
  </include>

  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_with_vi_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </include>

    <node name="mav_nonlinear_mpc_service" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_service_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="true" />
      <param name="reference_frame" value="world"/>
    </node>

    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>

    <!-- launch training script -->
    <node pkg="rotors_openai_ros_example" name="multi_mav_env_test" type="multi_mav_env_test.py" output="screen"/>

  </group>

  <group ns="aircraft_1">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg friendly_mav)" />
      <arg name="namespace" value="aircraft_1"/>
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg friendly_mav)_aircraft_1"/>
      <arg name="x" value="-4.0"/>
      <arg name="y" value="4.0"/>
    </include>

    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg friendly_mav).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg friendly_mav).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="true" />
      <param name="reference_frame" value="world"/>
    </node>

    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg friendly_mav).yaml" />
    </node>

    <!-- <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg friendly_mav).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg friendly_mav).yaml" />
      <remap from="odometry" to="ground_truth/odometry" />
    </node> -->

    <node name="gym_waypoints_pub" pkg="rotors_gazebo" type="gym_waypoints_pub" output="screen" args="$(find rotors_openai_ros_example)/resource/agent1_waypoints.txt"/>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

  <group ns="aircraft_2">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg friendly_mav)" />
      <arg name="namespace" value="aircraft_2" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg friendly_mav)_aircraft_2"/>
      <arg name="x" value="4.0"/>
      <arg name="y" value="-4.0"/>
    </include>

    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg friendly_mav).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg friendly_mav).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="true" />
      <param name="reference_frame" value="world"/>
    </node>

    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg friendly_mav).yaml" />
    </node>

    <!-- <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg friendly_mav).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg friendly_mav).yaml" />
      <remap from="odometry" to="ground_truth/odometry" />
    </node> -->

    <node name="gym_waypoints_pub" pkg="rotors_gazebo" type="gym_waypoints_pub" output="screen" args="$(find rotors_openai_ros_example)/resource/agent2_waypoints.txt"/>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

</launch>