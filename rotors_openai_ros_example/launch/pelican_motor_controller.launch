<launch>
  <arg name="mav_name" default="pelican"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
    <!-- This version uses the openai_ros environments -->
    <rosparam command="load" file="$(find rotors_openai_ros_example)/config/pelican_willowgarage_params.yaml" />
    <!-- Launch the training system -->
    <include file="$(find rotors_gazebo)/launch/willow_garage_openai_ros.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="world_name" value="$(arg world_name)" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)" />
    </include>

    <node name="motor_controller_service_node" pkg="rotors_control" type="motor_controller_service_node" ns="$(arg mav_name)" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="ground_truth/odometry" />
    </node>
    <!-- launch training script -->
    <!-- <node pkg="rotors_openai_ros_example" name="pelican_ppo_attitude_controller_training" type="pelican_ppo_attitude_controller_training.py" output="screen"/> -->
</launch>